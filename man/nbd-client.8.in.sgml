<!doctype refentry PUBLIC "-//OASIS//DTD DocBook V4.5//EN" [

<!-- Process this file with docbook-to-man to generate an nroff manual
     page: `docbook-to-man manpage.sgml > manpage.1'.  You may view
     the manual page with: `docbook-to-man manpage.sgml | nroff -man |
     less'.  A typical entry in a Makefile or Makefile.am is:

manpage.1: manpage.sgml
	docbook-to-man $< > $@
  -->

  <!-- Fill in your name for FIRSTNAME and SURNAME. -->
  <!ENTITY dhfirstname "<firstname>Wouter</firstname>">
  <!ENTITY dhsurname   "<surname>Verhelst</surname>">
  <!-- Please adjust the date whenever revising the manpage. -->
  <!ENTITY dhdate      "<date>$Date$</date>">
  <!-- SECTION should be 1-8, maybe w/ subsection other parameters are
       allowed: see man(7), man(1). -->
  <!ENTITY dhsection   "<manvolnum>8</manvolnum>">
  <!ENTITY dhemail     "<email>wouter@debian.org</email>">
  <!ENTITY dhusername  "Wouter Verhelst">
  <!ENTITY dhucpackage "<refentrytitle>NBD-CLIENT</refentrytitle>">
  <!ENTITY dhpackage   "nbd-client">

  <!ENTITY debian      "<productname>Debian GNU/Linux</productname>">
  <!ENTITY gnu         "<acronym>GNU</acronym>">
]>

<refentry>
  <refentryinfo>
    <address>
      &dhemail;
    </address>
    <author>
      &dhfirstname;
      &dhsurname;
    </author>
    <copyright>
      <year>2001</year>
      <holder>&dhusername;</holder>
    </copyright>
    &dhdate;
  </refentryinfo>
  <refmeta>
    &dhucpackage;

    &dhsection;
  </refmeta>
  <refnamediv>
    <refname>&dhpackage;</refname>

    <refpurpose>connect to a server running nbd-server(1), to use its
    exported block device</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <cmdsynopsis>
      <command>&dhpackage;</command>
      <arg choice=plain><replaceable>host</replaceable></arg>
      <arg><replaceable>port</replaceable></arg>
      <arg choice=plain><replaceable>nbd-device</replaceable></arg>
      <arg>-connections <replaceable>num</replaceable></arg>
      <arg>-sdp</arg>
      <arg>-swap</arg>
      <arg>-persist</arg>
      <arg>-nofork</arg>
      <arg>-nonetlink</arg>
      <arg>-systemd-mark</arg>
      <arg>-readonly</arg>
      <arg>-block-size <replaceable>block size</replaceable></arg>
      <arg>-timeout <replaceable>seconds</replaceable></arg>
      <arg>-name <replaceable>name</replaceable></arg>
      <arg>-certfile <replaceable>certfile</replaceable></arg>
      <arg>-keyfile <replaceable>keyfile</replaceable></arg>
      <arg>-cacertfile <replaceable>cacertfile</replaceable></arg>
      <arg>-tlshostname <replaceable>hostname</replaceable></arg>
    </cmdsynopsis>
    <cmdsynopsis>
      <command>&dhpackage;</command>
      <arg choice=plain><option>-unix <replaceable>path</replaceable></option></arg>
      <arg choice=plain><replaceable>nbd-device</replaceable></arg>
      <arg>-connections <replaceable>num</replaceable></arg>
      <arg>-sdp</arg>
      <arg>-swap</arg>
      <arg>-persist</arg>
      <arg>-nofork</arg>
      <arg>-nonetlink</arg>
      <arg>-systemd-mark</arg>
      <arg>-readonly</arg>
      <arg>-block-size <replaceable>block size</replaceable></arg>
      <arg>-timeout <replaceable>seconds</replaceable></arg>
      <arg>-name <replaceable>name</replaceable></arg>
    </cmdsynopsis>
    <cmdsynopsis>
      <command>&dhpackage;</command>
      <arg choice=plain><replaceable>nbd-device</replaceable></arg>
    </cmdsynopsis>
    <cmdsynopsis>
      <command>&dhpackage;</command>
      <arg choice=plain><option>-d <replaceable>nbd-device</replaceable></option></arg>
    </cmdsynopsis>
    <cmdsynopsis>
      <command>&dhpackage;</command>
      <arg choice="plain"><option>-c <replaceable>nbd-device</replaceable></option></arg>
    </cmdsynopsis>
    <cmdsynopsis>
      <command>&dhpackage;</command>
      <arg choice="plain"><option>-l <replaceable>host</replaceable></option></arg>
      <arg>port</arg>
    </cmdsynopsis>
    <cmdsynopsis>
      <command>&dhpackage;</command>
      <arg>-netlink</arg>
      <arg choice="plain"><option>-l <replaceable>host</replaceable></option></arg>
    </cmdsynopsis>
  </refsynopsisdiv>
  <refsect1>
    <title>DESCRIPTION</title>

    <para>With <command>&dhpackage;</command>, you can connect to a
    server running <command>nbd-server</command>, thus using raw
    diskspace from that server as a blockdevice on the local
    client.</para>

    <para>To do this, support from the Linux Kernel is necessary, in
    the form of the Network Block Device (NBD). When you have that,
    either in the kernel, or as a module, you can connect to an NBD
    server and use its exported file through a block special file with
    major mode 43.</para>

    <para>Optionally, long options can also be specified with two
      leading dashes.</para>
  </refsect1>
  <refsect1>
    <title>OPTIONS</title>

    <para>The following options are supported:</para>

    <variablelist>
      <varlistentry>
	<term><option>-block-size <replaceable>block size</replaceable></option></term>
	<term><option>-b</option></term>
	<listitem>
	  <para>Use a blocksize of "block size". Default is 1024;
	    allowed values are either 512, 1024, 2048 or 4096</para>
	</listitem>
      </varlistentry>
      <varlistentry>
        <term><option>-connections <replaceable>num</replaceable></option></term>
	<term><option>-C</option></term>
	<listitem>
	  <para>Use <replaceable>num</replaceable> connections to the
	  server, to allow speeding up request handling, at the cost of higher
	  resource usage on the server. Use of this option requires kernel
	  support available first with Linux 4.9.
	</listitem>
      </varlistentry>
      <varlistentry>
	<term><option>host</option></term>
	<listitem>
	  <para>The hostname or IP address of the machine running
	    <command>nbd-server</command>. Since 2.9.15, the NBD
	    utilities support IPv6.</para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term><option>-timeout
	<replaceable>seconds</replaceable></option></term>
	<term><option>-t</option></term>
	<listitem>
	  <para>Set the connection timeout to "seconds". For this to
	  work, you need a kernel with support for the NBD_SET_TIMEOUT
	  ioctl; this was introduced into Linus' tree on 2007-10-11,
	  and will be part of kernel 2.6.24.</para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term><option>port</option></term>
	<listitem>
	  <para>The TCP port on which <command>nbd-server</command> is
	    running at the server.</para>
          <para>The port number defaults to 10809, the IANA-assigned
            port number for the NBD protocol.</para>
          <para>Previous versions of the nbd tools supported an older
            version of the negotiation protocol known as "oldstyle".
            This protocol version is no longer supported as of version
            3.11 of the nbd support tools.</para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term><option>nbd-device</option></term>
	<listitem>
	  <para>The block special file (<filename>/dev</filename> entry) which this
	  nbd-client should connect to, specified as a full path.</para>
	  <para>When the mode is used wherein no hostname or export name is
	  specified, &dhpackage; will look up the necessary configuration in
	  the <filename>nbdtab</filename> file. For more information, see
	  nbdtab(5).</para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term><option>-check</option></term>
	<term><option>-c</option></term>
	<listitem>
	  <para>Check whether the specified nbd device is
	  connected.</para>
	  <para>If the device is connected, &dhpackage; will exit
	  with an exit state of 0 and print the PID of the &dhpackage;
	  instance that connected it to stdout.
	  <para>If the device is not
	  connected or does not exist (for example because the nbd
	  module was not loaded), &dhpackage; will exit with an exit
	  state of 1 and not print anything on stdout.</para>
	  <para>If an error occurred, &dhpackage; will exit with an exit
	  state of 2, and not print anything on stdout either.</para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term><option>-disconnect</option></term>
	<term><option>-d</option></term>
	<listitem>
	  <para>Disconnect the specified nbd device from the
	  server</para>
	</listitem>
      </varlistentry>
      <varlistentry>
        <term><option>-list</option></term>
	<term><option>-l</option></term>
	<listitem>
	  <para>
	    Ask the server for a list of available exports. If the
	    server is exporting over IPv6 as well as over IPv4, this
	    will list all exports twice; otherwise, it should list them
	    all only once.</para>
	  <para>Note that this option <emphasis>only</emphasis> works
	    with nbd-server processes running version 3.1 or above, and
	    must be enabled in server configuration (with the
	    "allowlist" option) before it can be used.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
        <term><option>-nonetlink</option></term>
        <term><option>-L</option></term>
        <listitem>
	  <para>Starting with version 3.17, &dhpackage; will default to
	  using the netlink interface to configure an NBD device. This
	  option allows to use the older ioctl() interface to configure
	  the device.
	  </para>
	  <para>This option is only available if &dhpackage; was
	  compiled against libnl-genl. If that is not the case,
	  nbd-client will only be able to use the ioctl interface (and
	  the option will not be available).</para>
	  <para>Note that a future version of &dhpackage; will
	  <emphasis>require</emphasis> the use of netlink, but it has
	  not yet been decided when that will be the case.</para>
        </listitem>
      </varlistentry
      <varlistentry>
	<term><option>-persist</option></term>
	<term><option>-p</option></term>
	<listitem>
	  <para>When this option is specified, &dhpackage; will
	    immediately try to reconnect an nbd device if the
	    connection ever drops unexpectedly due to a lost
	    server or something similar.</para>
	</listitem>
      </varlistentry>
      <varlistentry>
        <term><option>-readonly</option></term>
        <term><option>-R</option></term>
        <listitem>
          <para>When this option is specified, &dhpackage; will tell the
            kernel to treat the device as read-only, even if the server
            would allow writes.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><option>-sdp</option></term>
	<term><option>-S</option></term>
	<listitem>
	  <para>Connect to the server using the Socket Direct Protocol
	    (SDP), rather than IP. See nbd-server(5) for details.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term><option>-swap</option></term>
	<term><option>-s</option></term>
	<listitem>
	  <para>Specifies that this NBD device will be used as
	  swapspace. This option attempts to prevent deadlocks by
	  performing mlockall() and adjusting the oom-killer score
	  at an appropriate time. It does not however guarantee
	  that such deadlocks can be avoided.</para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term><option>-systemd-mark</option></term>
	<term><option>-m</option></term>
	<listitem>
	  <para>The systemd init system requires that processes which
	    should not be killed at shutdown time be marked appropriately
	    by replacing the first letter of their argv[0] with an '@'
	    sign.</para>
	  <para>This option will cause nbd-client to do so.</para>
	  <para>Note that this only works if nbd-client is run from an
	    initrd; i.e., systemd will ignore such a mark if run from a
	    systemd unit file or from the command line.</para>
	</listitem>
      </varlistentry>
      <varlistentry>
        <term><option>-nofork</option></term>
	<term><option>-n</option></term>
	<listitem>
	  <para>Specifies that the NBD client should not detach and
	  daemonize itself. This is mostly useful for debugging.</para>
	  <para>
	    Note that nbd-client will still fork once to trigger an
	    update to the device node's partition table. It is not
	    possible to disable this.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
        <term><option>-no-optgo</option></term>
	<term><option>-g</option></term>
	<listitem>
	  <para>Disable the use of the NBD_OPT_GO protocol message, and
	  force the use of NBD_OPT_EXPORT_NAME instead.</para>
	  <para>
	    The NBD protocol has two phases: the negotiation phase, and
	    the transmission phase. To move from negotation to
	    transmission, older clients sent the NBD_OPT_EXPORT_NAME
	    message, for which the server could not produce an error
	    message in case the export name did not exist (or the client
	    had insufficient permissions to access it). Due to those
	    limitations, a replacement message NBD_OPT_GO was created
	    instead, which allows the server to reply with an error in
	    case of any problems.</para>
	  <para>
	    The protocol allows for a server to discard a message which
	    it does not understand; however, unfortunately some
	    implementations (including older versions of nbd-server) did
	    not handle that situation correctly and would get out of
	    sync with the client when it sent a message which the server
	    did not understand.</para>
	  <para>
	    When sending NBD_OPT_GO, nbd-client will try to do the right
	    thing and fall back to NBD_OPT_EXPORT_NAME. However, when
	    the server has the above-described bug, then this does not
	    work. In such a situation, the client will issue a
	    diagnostic suggesting the use of this option.
	  </para>
	  <para>
	    Note that there is a corresponding option for nbdtab, too.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
        <term><option>-name</option></term>
	<term><option>-N</option></term>
	<listitem>
	  <para>
	    Specifies the name of the export that we want to use. If not
	    specified, nbd-client will ask for a "default" export, if
	    one exists on the server.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
        <term><option>-unix</option></term>
        <term><option>-u</option></term>
        <listitem>
          <para>
            Connect to the server over a unix domain socket at
            <replaceable>path</replaceable>, rather than to a server
            over a TCP socket. The server must be listening on the given
            socket.
          </para>
        </listitem>
      </varlistentry>
        <varlistentry>
          <term><option>-certfile <replaceable>file</replaceable></option></term>
	  <term><option>-F</option></term>
	  <listitem>
	    <para>
	      Use the specified file as the client certificate for TLS
	      authentication to the server.
	    </para>
	  </listitem>
        </varlistentry>
	<varlistentry>
	  <term><option>-keyfile <replaceable>file</replaceable></option></term>
	  <term><option>-K</option></term>
	  <listitem>
	    <para>
	      Use the specified file as the private key for the client
	      cerificate.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><option>-cacertfile <replaceable>file</replaceable></option></term>
	  <term><option>-A</option></term>
	  <listitem>
	    <para>
	      Use the specified file as the CA certificate for TLS
	      authentication to the server.
	    </para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><option>-tlshostname <replaceable>hostname</replaceable></option></term>
	  <term><option>-H</option></term>
	  <listitem>
	    <para>
	      Use the specified hostname for the TLS context. If not
	      specified, the hostname used to connect to the server will
	      be used.</para>
	  </listitem>
	</varlistentry>
      </variablelist>
    <refsect2>
      <title>TLS support</title>
      <para>Enabling any of the TLS-related options causes the client to
        use the NBD_OPT_STARTTLS command to upgrade the connection to
	TLS. Since negotiating TLS support from userspace for a kernel
	socket would be very involved (if passing keys to kernel space
	were even possible, which it isn't), the way this is implemented
	is that the nbd-client process creates a socketpair, one side of
	which it hands to the kernel, and the other side of which is
	handed to an encrypting/decrypting proxy. This has the effect
	that all communication will be encrypted before being sent over
	the wire; however, doing so is not safe in combination with
	swapping over an NBD device:</para>
      <para>
        In order to free memory by swapping, the kernel needs to be sure
	that the write to the nbd device has finalized. For this, it
	needs to be able to receive an NBD_CMD_WRITE reply which informs
	it that the write has completed successfully and that the memory
	may be released. Receiving data over the network, however,
	requires that the kernel <emphasis>allocate</emphasis> memory
	first, which is impossible if we're low on memory (a likely
	situation when trying to swap). This is likely to cause a
	deadlock when we're low on memory and there are high amounts of
	network traffic.</para>
      <para>To remedy this situation, the kernel sets the PF_MEMALLOC
        option on the nbd socket; when low on memory, it will throw away
	all packets except for those destined to a socket with that
	option set, relying on the normal TCP retransmit system to
	ensure that data is not lost. This avoids the deadlock described
	above.</para>
      <para>However, the PF_MEMALLOC option is set on the socket that is
        connected to the nbd device, not the encrypted socket connected
	to the encrypting/decrypting proxy. As such, when using TLS, the
	PF_MEMALLOC option is not set on the socket that actually
	receives data from the network, which means that the deadlock
	reappears.</para>
      <para>For this reason, if the <option>-swap</option> option is
        used when TLS is in use, &dhpackage; will issue an appropriate
	warning.</para>
    </refsect2>
  </refsect1>
  <refsect1>
    <title>EXAMPLES</title>

    <para>Some examples of nbd-client usage:</para>
    <itemizedlist mark="none">
      <listitem>
	<para>To connect to a server running on port 2000 at host
	  "server.domain.com", using the client's block special file
	  "/dev/nbd0":</para>
	<para><command>nbd-client server.domain.com 2000
	  /dev/nbd0</command></para>
      </listitem>
      <listitem>
	<para>To connect to a server running on port 2001 at host
	  "swapserver.domain.com", using the client's block special
	  file "/dev/nbd1", for swap purposes:</para>
	<para><command>nbd-client swapserver.domain.com 2001 /dev/nbd1
	  -swap</command></para>
      </listitem>
      <listitem>
	<para>To disconnect the above connection again (after making
	  sure the block special file is not in use anymore):</para>
	<para><command>nbd-client -d /dev/nbd1</command></para>
      </listitem>
    </itemizedlist>
  </refsect1>
  <refsect1>
    <title>SEE ALSO</title>

    <para>nbd-server (1).</para>

  </refsect1>
  <refsect1>
    <title>AUTHOR</title>
    <para>The NBD kernel module and the NBD tools have been written by
    Pavel Macheck (pavel@ucw.cz).</para>

    <para>The kernel module is now maintained by Paul Clements
    (Paul.Clements@steeleye.com), while the userland tools are maintained by
    Wouter Verhelst (wouter@debian.org)</para>

    <para>This manual page was written by &dhusername; (&dhemail;) for
    the &debian; system (but may be used by others).  Permission is
    granted to copy, distribute and/or modify this document under the
    terms of the <acronym>GNU</acronym> General Public License,
    version 2, as published by the Free Software Foundation.</para>

  </refsect1>
</refentry>
